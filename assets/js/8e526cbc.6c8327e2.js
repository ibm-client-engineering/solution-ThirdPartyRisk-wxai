"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7546],{2440:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=n(5893),o=n(1151);const s={title:"wxai Implementation",description:"sample page",custom_edit_url:null},a=void 0,r={id:"Create/wxai Implementation",title:"wxai Implementation",description:"sample page",source:"@site/docs/04-Create/01-wxai Implementation.mdx",sourceDirName:"04-Create",slug:"/Create/wxai Implementation",permalink:"/solution-ThirdPartyRisk-wxai/Create/wxai Implementation",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"wxai Implementation",description:"sample page",custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Software Requirements",permalink:"/solution-ThirdPartyRisk-wxai/Prepare/software-reqs"},next:{title:"OpenPages with External Input",permalink:"/solution-ThirdPartyRisk-wxai/Create/OpenPages Ext Input"}},d={},l=[{value:"Preprocess Source Documents",id:"preprocess-source-documents",level:2},{value:"Preprocess MSR docuemnt and attach the relevant metadata",id:"preprocess-msr-docuemnt-and-attach-the-relevant-metadata",level:3},{value:"Vector Database - Chromadb",id:"vector-database---chromadb",level:3},{value:"Create Reference Report",id:"create-reference-report",level:2},{value:"Extract SIG Question",id:"extract-sig-question",level:3},{value:"Determine Reference Response",id:"determine-reference-response",level:3},{value:"Determine Relevant MSR Context",id:"determine-relevant-msr-context",level:3},{value:"Determine Issue",id:"determine-issue",level:3},{value:"Create Assessor Report",id:"create-assessor-report",level:2},{value:"Classify Issue",id:"classify-issue",level:3},{value:"Classify Gap",id:"classify-gap",level:3},{value:"Provide MSR Context",id:"provide-msr-context",level:3},{value:"Provide Recommendation",id:"provide-recommendation",level:3}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("div",{style:{borderBottom:"1px solid #000",marginTop:"20px",marginBottom:"20px"}}),"\n",(0,i.jsx)(t.h2,{id:"preprocess-source-documents",children:"Preprocess Source Documents"}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"preprocess-msr-docuemnt-and-attach-the-relevant-metadata",children:"Preprocess MSR docuemnt and attach the relevant metadata"}),"\n",(0,i.jsxs)(t.p,{children:["To retrieve the relevant metadata from the MSR document, we need to first identify where the Minimum Security Requirements section is along with what the subsections are to figure out when the section begins and end.\nNow let's create a ",(0,i.jsx)(t.code,{children:"section_extraction"})," function that takes in the name of the pdf file.\nIn the function, there are four main parts. The first part is to utilize the ",(0,i.jsx)(t.code,{children:"PdfReader"})," from the ",(0,i.jsx)(t.code,{children:"PyPDF2"})," library to read and extract the content from the MSR pdf.\nThen, loop through the pdf and remove any headers, footers, or new lines from the extracted content.\nAfterwards, create a nested-loop to extract the file name, header, summary, subheading, and the subheading's content and place it into a dictionary format."]}),"\n",(0,i.jsx)(t.p,{children:"Here is an example of the dictionary format:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'value == where the extracted content belong\n\ndictionary = {File Name: "value", Header: "value", Summary: "value", Subheading: "value", Content: "value"}, {...}, ...\n\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This is where you can use python's ",(0,i.jsx)(t.code,{children:"find()"})," function to find the content to match the key of the dictionary. Lastly, place the finished dictionary into a final list and dump/write into a JSON file."]}),"\n",(0,i.jsxs)(t.p,{children:["If you need support in constructing the function, you can find the pre-processing function ",(0,i.jsx)(t.a,{href:"https://github.ibm.com/ibm-client-engineering/solution-thirdPartyRisk-wxai/blob/ebb6ea22071760994a5a071f19b02831752e9ff6/assets/Code_src/version_2/MSR_preprocess.py#L141",children:"here"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"vector-database---chromadb",children:"Vector Database - Chromadb"}),"\n",(0,i.jsxs)(t.p,{children:["After we cut the MSR into chunks and stored it in json, we stored the chunks along with their associated metadata in a vector database. This allowed us to do semantic searches using the question text to find the most similar MSR context. The vector database that we used to store the msr context was created using ",(0,i.jsx)(t.a,{href:"https://www.trychroma.com",children:"chromadb"}),". We used the default vector embedding and cosine similarity, although these could be tweaked for better results."]}),"\n",(0,i.jsxs)(t.p,{children:["You can find the code where we ingested the documents into the vector database ",(0,i.jsx)(t.a,{href:"https://github.ibm.com/ibm-client-engineering/solution-thirdPartyRisk-wxai/blob/ebb6ea22071760994a5a071f19b02831752e9ff6/assets/Code_src/version_2/MSR_preprocess.py#L24",children:"here"}),". The content is just the text from that chunk of the MSR, and we stored information about headers, filename, and a summary in the metadata. We kept the formation of the ids the same, so that chromadb could recognize that we were not adding new chunks every time we reran a script that used the MSR vector database."]}),"\n",(0,i.jsx)(t.h2,{id:"create-reference-report",children:"Create Reference Report"}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"extract-sig-question",children:"Extract SIG Question"}),"\n",(0,i.jsxs)(t.p,{children:["To extract each of the questions from the blank SIG, we need to read the blank SIG as a pandas dataframe. the ",(0,i.jsx)(t.code,{children:"read_excel()"})," function does this pretty well, but there were two important steps. First, because the blank SIG has multiple sheets, the object read out of the ",(0,i.jsx)(t.code,{children:"read_excel()"}),' function will be a dictionary of dataframes organized by sheet name. Second, the only one of these sheets we cared about is the "Content Library" sheet, because that sheet contains every question. Accordingly, our code to read the blank SIG and extract the questions was as follows:']}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'def create_ref_sig(bs_df):\n    questions = bs_df["Content Library"].iloc[:, 2:4]\n'})}),"\n",(0,i.jsxs)(t.p,{children:["where bs_df is the object from the ",(0,i.jsx)(t.code,{children:"read_excel()"})," function, and the only columns selected are the question and question number column."]}),"\n",(0,i.jsx)(t.h3,{id:"determine-reference-response",children:"Determine Reference Response"}),"\n",(0,i.jsxs)(t.p,{children:["In order to create the Reference Report, the LLM needs to provide the best answer to each SIG question, answering to its best ability what the bank would want from their vendors. That is where the ",(0,i.jsx)(t.code,{children:"determine_response()"})," function comes, as it takes in each SIG question then outputs a Yes/No Response and an Additional Context message to give more information, all in JSON format. To view the exact code, please check out ",(0,i.jsx)(t.a,{href:"https://github.ibm.com/ibm-client-engineering/solution-thirdPartyRisk-wxai/blob/main/assets/Code_src/version_2/reference_SIG_generator.py",children:"this"})," link. Otherwise, the prompt that was utilized is below:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'prompt_input =\n"""<|system|>\nYou are Granite Chat, an AI language model developed by the IBM DMF Alignment Team. You are a cautious assistant that carefully follows instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior. You respond in a comprehensive manner unless instructed otherwise, providing explanations when needed while maintaining a neutral tone. You are capable of coding, writing, and roleplaying. You are cautious and refrain from generating real-time information, highly subjective or opinion-based topics. You are harmless and refrain from generating content involving any form of bias, violence, discrimination or inappropriate content. You always respond to greetings (for example, hi, hello, g\'day, morning, afternoon, evening, night, what\'s up, nice to meet you, sup, etc) with "Hello! I am Granite Chat, created by the IBM DMF Alignment Team. How can I help you today?". Please do not say anything else and do not start a conversation.\n<|user|>\nI will give you a question from a Standardized Information Gathering (SIG) Questionnaire regarding security. Answer Yes or No. Use your best judgement as to what response the bank would want from their vendors.\nPlease answer only in the following manner and in json output:\n{"Response": "Yes", "Additional Context":"<if any additional context>"}\n{"Response": "No", "Additional Context":"<if any additional context>"}\n<|assistant|>\nHere are a few examples:\nSIG Question #1: Does the password policy require password expiration within 90 days or less?\nAnswer: {"Response": "Yes", "Additional Context": "To ensure proper security protocol and risk mitigation, password policy should require password expiration within 90 days or less."}\n\nSIG Question #2: Does the password policy require changing passwords when there is an indication of possible system or password compromise?\nAnswer: {"Response": "Yes", "Additional Context": "When any indication of system or password comprise occurs, passwords need to be changed."}\n\nSIG Question #3: Does the password policy apply to all network devices including routers, switches, and firewalls?\nAnswer: {"Response": "Yes", "Additional Context": "Passwords for every system should adhere to password policy."}\n\nSIG Question #4: Is there an administrative process to revoke authenticators if required?\nAnswer: {"Response": "Yes", "Additional Context": "The ability to revoke access to certain personnel should always be required."}\n\nSIG Question #5: Is access to systems that store, or process scoped data limited?\nAnswer: {"Response": "Yes", "Additional Context": "Access should always be limited to systems that store confidential data."}\n<|user|>\nPlease provide the answer to the following SIG Question in JSON:\n"""+question+"""\n\nAnswer:\n<|assistant|>\n"""\n'})}),"\n",(0,i.jsx)(t.h3,{id:"determine-relevant-msr-context",children:"Determine Relevant MSR Context"}),"\n",(0,i.jsx)(t.p,{children:"Determining the MSR context originally utilized just a vector database for semantic search, but we found that this created an unforseen issue. Although the MSR covers much of the same ground as the SIG questionaire, the venn diagram isn't a perfect circle, so to speak. When the SIG question does not have a truly relevant MSR context, we would still assign it the closest section of the MSR that the vector database could find, which then also found its way into the process for determining the reference response, producing results that sometimes seemed to align more with the MSR context than the question itself."}),"\n",(0,i.jsx)(t.p,{children:'For example, the question from the section on Environmental, Social, and Governance (ESG) "Does the organization maintain processes to ensure there are no adverse impacts on biodiversity, including deforestation, ecosystem integrity, natural resource conservation, and land degradation?" would sometimes be given the reference response "No" because of the irrelevant MSR context provided.'}),"\n",(0,i.jsxs)(t.p,{children:["To remedy this, we added an extra step after retrieving the three most similar chunk of the MSR that verifies if any of the MSR contexts is actually relevant or not, and if so which one is the most relevant. You can find this function along with the associated prompt we used ",(0,i.jsx)(t.a,{href:"https://github.ibm.com/ibm-client-engineering/solution-thirdPartyRisk-wxai/blob/ebb6ea22071760994a5a071f19b02831752e9ff6/assets/Code_src/version_2/reference_SIG_generator.py#L161",children:"here"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"determine-issue",children:"Determine Issue"}),"\n",(0,i.jsxs)(t.p,{children:["Based on our experience with irrelevant MSR contexts causing issues further down the pipeline, we decided to implement a similar system for determining the most relevant issue from the catalog (if one exists). In this case, because we already know what domain the question is from the first letter of the question number we can filter out all of the issues not associated with that domain. The ",(0,i.jsx)(t.code,{children:"test_doc_needed()"})," function checks if the issue references an external document, which we are excluding for this POC because we do not have any of those documents."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'#Retrieve all the issues (that dont rely on external docs) corresponding to the letter/domain\ndef filter_issues(letter) :\n    num_rows, _ = df.shape\n    issues = []\n    for i in range(num_rows) :\n        if type(df.iloc[i, 1]) == str and df.iloc[i, 1][0].lower() == letter.lower() and not test_doc_needed(df, i):\n            qn = df.iloc[i, 0]\n            issue_desc = df.loc[i, "Issue Description"]\n            risk_statement = df.loc[i, "Risk Statement"]\n            issues.append({"Ques Num": qn, "Issue Description": issue_desc, "Risk Statement": risk_statement})\n    return issues\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The next step is to do a relevancy check similar to the one done for the MSR context. You can find the code and prompt for that ",(0,i.jsx)(t.a,{href:"https://github.ibm.com/ibm-client-engineering/solution-thirdPartyRisk-wxai/blob/ebb6ea22071760994a5a071f19b02831752e9ff6/assets/Code_src/version_2/reference_SIG_generator.py#L266",children:"here"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"create-assessor-report",children:"Create Assessor Report"}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:"We created the assessor report according to this truth table, where we catagorize each vendor response as an issue, gap, or neither depending on their inputs in the response and additional information fields. We labelled the responses according to this truth table:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"truth table",src:n(4700).Z+"",width:"1672",height:"918"})}),"\n",(0,i.jsx)(t.p,{children:"To determine if a response's additional information supports or contradicts their response, we used an LLM."}),"\n",(0,i.jsx)(t.h3,{id:"classify-issue",children:"Classify Issue"}),"\n",(0,i.jsx)(t.p,{children:"If the response provided by the vendor is the inverse of the reference response, then its likely that there is an issue. Still, we needed to check for the rare case where the vendor provides additional information that would seemingly imply that their answer should have been the desired one. Alternatively, the vendor could also provide additional information that reasonably justifies their response. In either case, if the LLM determines that the additional information indicates that the vendor response is not a true issue, then it is reclassified as a gap."}),"\n",(0,i.jsx)(t.p,{children:"In any other case, the original classification as an issue stands."}),"\n",(0,i.jsx)(t.h3,{id:"classify-gap",children:"Classify Gap"}),"\n",(0,i.jsx)(t.p,{children:'Leverage an LLM to determine whether or not the "Additional Information" provided within the vendor SIG supports or contradicts the response the vendor provided in the SIG.'}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:'If the "Additional Information" supports the vendor SIG response then classify the Gap as "No"'}),"\n",(0,i.jsx)(t.li,{children:'If the "Additional Information" contradicts the vendor SIG response then classify the Gap as "Yes"'}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'    prompt =  \n    (""" <|begin_of_text|><|start_header_id|>user<|end_header_id|> {INSTRUCTION}\n    You are provided with an input SIG question, vendor response in either "Yes" or "No", and a addtitional information provided by vendor to support their response. Based on your analysis, categorize the output into one of two categories:\n      1. "provided, contradicts response" in case additional information is provided but it does not support the response given by vendor.\n      2. "provided, supports response" in case additional information is provided and it supports the response given by vendor.\n            - Be very exact in generating output.\n            - Do not generate any reasoning in the output.\\n\\n""" + \n\n    "#### START OF QUESTION ####\\n\\n" + \n    "[input SIG Question: ]" +  f"{input_ques}\\n\\n" + \n\n    "[vendor response: ]" + f"{resp}\\n\\n" + \n\n    "[additional info: ]" + f"{info}\\n\\n" + \n    "#### END OF QUESTION ####  <|eot_id|><|start_header_id|>assistant<|end_header_id|>\\n\\n" + \n    "Output: ")\n'})}),"\n",(0,i.jsx)(t.h3,{id:"provide-msr-context",children:"Provide MSR Context"}),"\n",(0,i.jsx)(t.p,{children:"Copy the relevant MSR context from the reference SIG for the respective SIG question."}),"\n",(0,i.jsx)(t.h3,{id:"provide-recommendation",children:"Provide Recommendation"}),"\n",(0,i.jsxs)(t.p,{children:["To successfully compare the vendor-given report to the Reference Report, there needs to be a function that takes in the SIG Question, its corresponding relevant MSR context, and its Additional Information (if given), to determine if the vendor-given report aligns with the Reference report. That is where the ",(0,i.jsx)(t.code,{children:"generate_recommendation()"})," function came in as it takes in all 3 of those arguments to determine if the 2 reports are Relevant (Yes), Partially Relevant, or Not relevant (No), while additionally providing and explanation if necessary and follow-up questions to ask the vendor in the scenario where the reports are partially or not relevant. To check out our code, please feel free to view it at ",(0,i.jsx)(t.a,{href:"https://github.ibm.com/ibm-client-engineering/solution-thirdPartyRisk-wxai/blob/main/assets/Code_src/version_2/vendor_SIG_report.py",children:"this"})," link. In the meantime, view the prompt that was used here:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'instruction =\n"""You are a security analyst. I will give you three items, a Standardized Information Gathering (SIG) question, a Minimum Security Requirement (MSR) Reference text, and an Additional Information text. Determine if the Additional Information text answers the SIG question and/or if the Additional Information text supports the MSR Reference text. Output should be either Yes, No or Partially relevant. If applicable, please provide an explanation in detail and any follow-up questions that you\'d like to ask the vendor.\n\nFor the explanation, explain in detail how you got to the conclusion of the status, be specific if the content was gathered from additional information to back up the selected status, and why you conclude with the selected status.\n\nFor the follow-up questions, you are expected to generate more than one follow-up question until you think it is enough to gather the answer we need to answer the SIG\'s question. Lastly, make sure the follow-up questions are in a numbered list.\n\nPlease answer in the following manner and in json output:\n{"status": "Yes", "explanation and follow-up questions":"<if any explanation> <if any follow-up questions> "}\n{"status": "Partially relevant", "explanation and follow-up questions":"<if any explanation> <if any follow-up questions> "}\n{"status": "No", "explanation and follow-up questions":"<if any explanation> <if any follow-up questions> "}\n\n\nBelow is the status definition:\nstatus: Yes, the Additional Information text addresses the SIG question and is in alignment with the MSR Requirement policies.\nstatus: Partially relevant, either the Additional Information text addresses the SIG question or the Additional Information text is in alignment with the MSR requirement policies.\nstatus: No, the Additional Information text does not addresses the SIG question and is not in alignment with the MSR Requirement policies.\n\nQuestion:\n{{Question}}\n\nMinimum Security Requirement Text:\n{{MSRContext}}\n\nVendor document:\n{{AdditionalInfo}}\n\nResult:"""\n\nexamples = """[\n{\n    "input": "**DISCLAIMER: Follow examples for structure of what the output should look like**\\n\\nquestion = question content \\n\\nMSRcontext = MSR content \\n\\nAdditionalInfo = additional vendor info content ",\n    "output": "{\\"status\\": \\"status answer\\", \\"explanation and follow-up questions\\":\\"Explanation content.\\n\\nFollow-up questions: \\n1. Question 1 \\n2. Question 2\\n3. Question 3\\"}"\n}\n]"""\n\ninput = """question = """+question+"""\n\n"""+msr_context+"""\n\n"""+additional_info+"""\n"""\n\ninput_prefix = "Input:"\noutput_prefix = "Output:"\n\nprompt_input = instruction + examples + input + input_prefix + output_prefix\n\n'})})]})}function c(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},4700:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/truthtable-1d012bf4947511278c4af020f6eadeb8.png"}}]);